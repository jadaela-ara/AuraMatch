# Workflow de d√©ploiement Frontend AuraMatch sur Cloud Run
name: 'Deploy Frontend to Cloud Run'

on:
  push:
    branches: ['main']
    paths:
      - '**'
      - '!backend/**'
      - '!.github/workflows/deploy-backend.yml'
  workflow_dispatch:
    inputs:
      backend_url:
        description: 'Backend URL (optional - will fetch from backend service if not provided)'
        required: false
        type: string
  workflow_call:
    inputs:
      backend_url:
        description: 'Backend URL from backend workflow'
        required: true
        type: string
    outputs:
      frontend-url:
        description: "URL du service frontend d√©ploy√©"
        value: ${{ jobs.deploy.outputs.frontend-url }}

env:
  PROJECT_ID: 'auramatch-470020'
  REGION: 'europe-west1'
  SERVICE: 'auramatch-frontend'
  BACKEND_SERVICE: 'auramatch-backend'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/343501244023/locations/global/workloadIdentityPools/auramatch-pool/providers/github-oidc'
  REGISTRY: 'europe-west1-docker.pkg.dev'
  REPOSITORY: 'auramatch-frontend'

jobs:
  deploy:
    runs-on: 'ubuntu-latest'
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    outputs:
      frontend-url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'
      
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
      
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      
      # R√©cup√©rer l'URL du backend
      - name: 'Get Backend URL'
        id: backend
        run: |
          if [[ -n "${{ inputs.backend_url }}" ]]; then
            BACKEND_URL="${{ inputs.backend_url }}"
            echo "Using provided backend URL: $BACKEND_URL"
          elif [[ -n "${{ github.event.inputs.backend_url }}" ]]; then
            BACKEND_URL="${{ github.event.inputs.backend_url }}"
            echo "Using manual input backend URL: $BACKEND_URL"
          else
            # Essayer de r√©cup√©rer depuis le service Cloud Run
            echo "Fetching backend URL from Cloud Run service..."
            BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} \
              --region=${{ env.REGION }} \
              --format="value(status.url)" 2>/dev/null || echo "")
            
            if [[ -z "$BACKEND_URL" ]]; then
              echo "‚ùå Backend service not found. Deploy backend first or provide backend_url input."
              exit 1
            fi
          fi
          
          echo "‚úÖ Backend URL: $BACKEND_URL"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
      
      # Cr√©er le repository Artifact Registry s'il n'existe pas
      - name: 'Create Artifact Registry repository'
        run: |
          gcloud artifacts repositories describe ${{ env.REPOSITORY }} \
            --location=${{ env.REGION }} || \
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="AuraMatch Frontend Docker repository"
      
      - name: 'Docker Auth'
        uses: 'docker/login-action@v3'
        with:
          registry: ${{ env.REGISTRY }}
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'
      
      - name: 'Prepare Frontend Build'
        run: |
          # Cr√©er le fichier .env pour le build
          cat > .env.production << EOF
          VITE_API_BASE_URL=${{ env.BACKEND_URL }}
          VITE_SOCKET_URL=${{ env.BACKEND_URL }}
          VITE_NODE_ENV=production
          EOF
          
          echo "üìù Frontend environment configured:"
          cat .env.production
          
          # Utiliser le .dockerignore sp√©cifique au frontend
          cp .dockerignore.frontend .dockerignore
      
      - name: 'Build and Push Frontend Container'
        run: |
          DOCKER_TAG="${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
          
          # Build avec le Dockerfile frontend
          docker build -f Dockerfile.frontend -t "${DOCKER_TAG}" .
          docker push "${DOCKER_TAG}"
          
          # Sauvegarder pour les √©tapes suivantes
          echo "DOCKER_TAG=${DOCKER_TAG}" >> $GITHUB_ENV
      
      - name: 'Deploy Frontend to Cloud Run'
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ env.SERVICE }}'
          region: '${{ env.REGION }}'
          image: '${{ env.DOCKER_TAG }}'
          flags: |
            --allow-unauthenticated
            --port=8080
            --memory=512Mi
            --cpu=1
            --min-instances=0
            --max-instances=5
            --concurrency=80
            --timeout=300
      
      - name: 'Update Backend Environment Variables'
        run: |
          FRONTEND_URL="${{ steps.deploy.outputs.url }}"
          
          echo "üîß Updating backend environment variables..."
          gcloud run services update ${{ env.BACKEND_SERVICE }} \
            --region=${{ env.REGION }} \
            --update-env-vars="FRONTEND_URL=${FRONTEND_URL}" \
            --update-env-vars="GOOGLE_CALLBACK_URL=${{ env.BACKEND_URL }}/api/auth/google/callback" \
            --update-env-vars="FACEBOOK_CALLBACK_URL=${{ env.BACKEND_URL }}/api/auth/facebook/callback"
          
          echo "‚úÖ Backend environment variables updated"
      
      - name: 'Show Deployment Summary'
        run: |
          echo "üéâ Frontend deployed successfully!"
          echo "üìç Frontend URL: ${{ steps.deploy.outputs.url }}"
          echo "üîó Backend URL: ${{ env.BACKEND_URL }}"
          echo ""
          echo "üîß OAuth Google Configuration Required:"
          echo "   Callback URL: ${{ env.BACKEND_URL }}/api/auth/google/callback"
          echo "   Authorized Origins: ${{ steps.deploy.outputs.url }}"
          echo ""
          echo "üöÄ Your application is ready!"
      
      - name: 'Test Frontend Health'
        run: |
          echo "üîç Testing frontend availability..."
          sleep 30  # Attendre que le service soit pr√™t
          
          for i in {1..5}; do
            if curl -f -s "${{ steps.deploy.outputs.url }}" > /dev/null; then
              echo "‚úÖ Frontend health check passed"
              break
            fi
            echo "‚è≥ Attempt $i/5 - Waiting for frontend to be ready..."
            sleep 10
          done